#include <ACS712-SOLDERED.h>

#define SENSOR_PIN A0        // Pin analógico donde está conectado el ACS712
#define NUM_SAMPLES 100      // Número de muestras para promediado
#define BURN_THRESHOLD 0.05  // Umbral para detectar una lámpara quemada (ajustar según necesidad)

// Inicializar el sensor ACS712 en el pin especificado y en el rango correcto ---------------------------------------------
ACS712 sensor(SENSOR_PIN, ACS712_5A);

// Variables globales para almacenar los promedios de corriente
float currentOn, currentOff;

void setup() {
  Serial.begin(115200);
  ;  // Calibrar el sensor ACS712

  // Calcular el promedio de corriente con las lámparas apagadas
  currentOff = measureCurrent();
  Serial.print("Promedio de corriente (Lámparas apagadas): ");
  Serial.print(currentOff);
  Serial.println(" A");
  delay(10000);
  // Calcular el promedio de corriente con las lámparas encendidas
  currentOn = measureCurrent();

  // Ajustar según sea necesario
  Serial.print("Promedio de corriente (Lámparas encendidas): ");
  Serial.print(currentOn);
  Serial.println(" A");
  delay(5000);
}

void loop() {
  // Medir la corriente actual
  float current = measureCurrent();

  // Detectar estado de las lámparas
  if (current < currentOff + BURN_THRESHOLD) {
    Serial.println("Estado: Ambas lámparas apagadas.");
  } else if (current < currentOn - BURN_THRESHOLD) {
    Serial.println("Estado: Una lámpara quemada.");
  } else {
    Serial.println("Estado: Ambas lámparas encendidas.");
  }

  delay(1000);  // Ajustar según sea necesario
}

float measureCurrent() {
  float currentSum = 0.0;
  for (int i = 0; i < NUM_SAMPLES; i++) {
    float current = sensor.mA_AC() / 1000.0;  // Obtener la corriente en Amperios
    // Serial.println(current);
    currentSum += current;
    delay(10);  // Pequeña pausa para estabilizar las lecturas (ajustar según necesidad)
  }
  return currentSum / NUM_SAMPLES;
}
